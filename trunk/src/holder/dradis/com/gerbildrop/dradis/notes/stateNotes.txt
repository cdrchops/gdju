BasicGameState
    root for all game states
    has several abstract methods you will need to use

ClockGameState
    all elements related to the clock

DradisGameState
    all elements related to dradis

IngameState
    the original name for the gamestate test, now for FPS Node testing

LSOGameState
    all elements related to LSO display

MenuHandler
    all input related to the menu itself

MenuState
    the state for Menu handling and display

PlayGameState
    misleading, but represents the game state for all things related to the playability of the flying portion
        if you exit out of this state, then when you go back you will start all over at the original launch position

TestLoadingGameState
    just here for looks right now, eventually it will be used as part of the template for when loading a game
        to display a dynamic loading bar in association with the dynamic value HUD from JME.
        probably need "weights" for each object loading so that it will know what percentage is done
            probably check SARF for ideas.

LoadingGameState
    extending BaseGame
        at the end of your update method
        // Update the current game state.
        GameStateManager.getInstance().update(tpf);
        LoadingManager.getInstance().checkState("gameStart");

        at the end of initGame()
        GameStateManager.create();
        Runnable myRunnable = myRunnable();//thread to run while loading screen is happening"
        LoadingManager.getInstance().addLoader(new LoadingObject("gameStart", myRunnable, new MenuState("menu")));
        LoadingManager.getInstance().runLoader("gameStart");

        at the end of the render()
        GameStateManager.getInstance().render(tpf);

        in cleanup()
        // Performs cleanup on all loaded game states.
        GameStateManager.getInstance().cleanup();

    Basic flow is like this.

    You startup your game, it starts the loading view then when it's done it passes on to your next GameState
    in the meantime, if you have a class that needs to load something, it runs that in another thread.

    in the checkState, it checks that LoadingObject to see if the thread you're referencing is done and if the loading screen
    is done loading... if so, your next state is coming up.