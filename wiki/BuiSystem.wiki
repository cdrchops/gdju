#summary One-sentence summary of this page.

= BuiSystem =

_BuiSystem _ is a concept I came up with for use with BUI.  I found that in [http://jmonkeyengine.com JME] there's only one _DisplaySystem _ that is called by _DisplaySystem.getDisplaySystem() _.  You don't have to pass values around all over the place, just access it.  Why not do that for BUI?  So I did.

Let's cover some of the internals of the _BuiSystem _

{{{
private static BRootNode rootNode;
private static BStyleSheet style;
private static Stack<BWindow> history;
}}}

The _BRootNode _ is the root node of the entire BUI application you're running... it's like the parent of all that is BUI.

The _BStyleSheet _ is the _*.bss_ file that tells BUI how to layout your styles... whether your _BButtons _ are images or text or if your _BWindow _ has a line around it and what color is that line.  _BStyleSheet _ and _*.bss_ are like _css _ _Cascading Style Sheets _ for _HTML _.  You can name the .bss file any extension you want as long as the format of the .bss is consistent with what the _BStyleSheet _ processor is expecting.

The _Stack<BWindow> _ is our "navigation manager" of sorts.  We _push _ a _BWindow _ onto the _Stack<BWindow>_ when we have a chance that we'll want to go back to that _BWindow _.  We _pop_ a _BWindow_ off the _Stack<BWindow> _ when we're ready to go back to that _BWindow _.

You can initialize the _BuiSystem _ by passing a _BRootNode _ or child thereof, a path to your _BStylesheet _ and a _Stack<BWindow> _ for the history.

{{{
BuiSystem.init(_root, "/rsrc/styles.bss", new Stack<BWindow>());
}}}

You don't need to do ANY of these.  If you don't, then it will create a BPolledRootNode with the Timer.getTimer() and a new InputHandler()
the stylesheet will come from the bui jar and the Stack for history will just be instantiated.

in your code you can now just access the BStyleSheet, History and BRootNode:

{{{
BuiSystem.getStyle();
}}}

{{{
BuiSystem.getRootNode();
}}}

With the history, it's a little different.  Either you're going to push or pop a _BWindow_.

{{{
BuiSystem.push(WINDOW); // where WINDOW is your instantiation of a window
}}}

{{{
BuiSystem.back(); // where back pops the last window off of the stack and returns it to the display for the user to see
}}}

You can also get a specific window by name:

{{{
BuiSystem.getWindow("myWindowName"); //where myWindowName is the name you gave to your window
}}}

The _BuiSystem _ _BRootNode _ is not a replacement for components added to a specific _BWindow _.  You won't want to get a _rootNode_ from the _BuiSystem _ to reference in your subcomponent if your intent is to modify the node structure of the windows root node.  If you want to access the _BuiSystem _ _BRootNode _ to do a function (eg. go back in your display to a previous display) then you would be using _BuiSystem.back() _ correctly.